# -*- coding: utf-8 -*-
"""10-2 다중퍼셉트론 예시.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZDNQcpvO9mWNWK9lKu-IaoG8H8YvnCMq

2-layer 다중 퍼셉트론 예시
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense    #어떤 층을 사용할지

x1 = np.array([5,7,1,2,4,4,9,5,9,3])
x2 = np.array([0,-7,13,-6,3,0,-1,7,2,-9])
x = np.column_stack((x1,x2))   #길이가 10인 백터를 열방향으로 합치는 것
y = np.array([3,1,11,10,6,4,5,1,3,9]).reshape(10,1)  #벡터로 만든 후, reshape을 통해 10,1행렬로 만들어줌
print('x데이터의 형태 : ', x.shape)
print('y데이터의 형태 : ', y.shape)

x

"""* 레이어가 2개인 퍼셉트론 모형 설정(딥러닝 모형_기본)"""

model = Sequential()
model.add(Dense(units=3, activation='relu', input_dim = 2))   
model.add(Dense(units=1, activation='linear')) #activation은 자기 자신으로 했기 때문에 linear
model.summary()

"""```
model = Sequential()
model.add(Dense(units=3, activation='relu', input_dim = 2))   
# dense층을 추가 unit의 개수는 첫번째층(layer1)은 3개, activation은 비선형 활성화 함수 정해주는 것, 
# 입력층은 첫번째 층을 추가할 때 input의 개수를 알려줘야함 (10, 2)에서 2라는 것을 알 수 있음. input_dim = x.shape([1])


model.add(Dense(units=1, activation='linear')) #activation은 자기 자신으로 했기 때문에 linear
model.summary()
```

* 모형 학습 (파라미터가 값을 추정)
"""

model.compile(loss='mse', metrics=['mae', 'mse'])        #비용함수 지정,  y값이 실수값일 때 mse(평균제곱오차 : 실제y와 예측y의 차이의 제곱의 합) : 평균제곱오차를 최소화하는 방향으로 파라미터 추정할거임
model.fit(x,y,epochs = 30000, verbose = 0)   # verbose : 중간과정은 0으로 알려주지 마셈, epochs 는 30000번으로 함

"""* 학습된 파라미터 값 해석

"""

model.weights

"""```
 array([[ 0.17496082,  1.5398133 ,  1.9739866 ],
        [-0.44894433,  0.40269426,  0.00792232]] 
=> w값이 6개

 array([[ 2.0323327],
        [ 2.4273171],
        [-2.1024013]],

와 numpy=array([2.9809704] b1 값 
=> 4개

```

* 입력데이터 x의 모형에 의한 예측값
"""

model.predict(x)  # 예측 y값

"""* 모형 평가하기 - 모형에 의한 예측값과 실제값을 비교하여 얻은 MAE값과 MSE값"""

model.evaluate(x,y)         # 평균절대오차 : mae: 1.0130, loss: 2.1057